import * as shell from 'shelljs'
import * as path from 'path'
import * as fs from 'fs'

const addImportsToFolder = (target: string) => {
  try {
    const files = shell.ls(target)

    // TODO: sorting based on file type or name can be added to try to ensure that
    // angular.module(s) initialization is always imported before a module it's used

    for (const file of files) {
      const sub = path.join(target, file)

      const isDirectory = fs.lstatSync(sub).isDirectory()
      // shell.echo(`${sub} is a directory: ${isDirectory}`)

      if (isDirectory) {
        // shell.echo(`Prepare: ${sub}`)
        addImportsToFolder(sub)
      }
    }

    const index = path.join(target, 'index.js')
    shell.touch(index)
    shell.echo(`Create: ${index}`)

    const imports = files.reduce((final, file) => {
      const name = file.replace(/\.[^/.]+$/, '')

      // avoid auto-imports for existent index.js files
      if (name === 'index') {
        return final
      }

      // const line = `import ${name} from './${name}'`
      const line = `import './${name}'`
      return `${line}\n${final}`
    }, '')

    let contents = fs.readFileSync(index, 'utf8')
    contents = `// begin of autogenerated imports\n${imports}// end of autogenerated imports\n\n${contents}`

    fs.writeFileSync(index, contents)
  } catch (e) {
    //
  }
}

shell.echo('Prepare to add imports')

const sourceFolder = process.argv[2] // 'test-orig'
const targetFolder = process.argv[3] // 'test'
if (!targetFolder || !sourceFolder) {
  shell.exit(1)
}

const root = process.cwd()
const original = path.join(root, sourceFolder)
const entry = path.join(root, targetFolder)

// shell.echo(`Remove: ${entry}`)
shell.rm('-rf', entry)

// shell.exit(0)
// shell.echo(`Recreate folder: ${entry}`)
shell.cp('-Rf', original, entry)

addImportsToFolder(entry)
